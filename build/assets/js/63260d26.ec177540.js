"use strict";(self.webpackChunkdip_docs=self.webpackChunkdip_docs||[]).push([[2406],{8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var r=n(6540);const i={},t=r.createContext(i);function o(e){const s=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:s},e.children)}},9462:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"wttp/wttp-permissions","title":"WTTP Permissions","description":"WTTP Site implements a sophisticated role-based access control (RBAC) system that allows you to fine-tune who can access and modify different parts of your on-chain website. This system provides both security and flexibility for managing your site\'s content and functionality.","source":"@site/docs/03-wttp/03-permissions.md","sourceDirName":"03-wttp","slug":"/wttp/wttp-permissions","permalink":"/docs/wttp/wttp-permissions","draft":false,"unlisted":false,"editUrl":"https://github.com/TechnicallyWeb3/dip-docs/tree/main/packages/create-docusaurus/templates/shared/docs/03-wttp/03-permissions.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"wttp-permissions","title":"WTTP Permissions"},"sidebar":"tutorialSidebar","previous":{"title":"WTTP Methods","permalink":"/docs/wttp/wttp-methods"},"next":{"title":"WTTP Storage","permalink":"/docs/wttp/wttp-storage"}}');var i=n(4848),t=n(8453);const o={id:"wttp-permissions",title:"WTTP Permissions"},l="WTTP Permissions and Access Control",c={},a=[{value:"Permission System Overview",id:"permission-system-overview",level:2},{value:"Core Roles",id:"core-roles",level:3},{value:"DEFAULT_ADMIN_ROLE",id:"default_admin_role",level:4},{value:"SITE_ADMIN_ROLE",id:"site_admin_role",level:4},{value:"Resource Roles",id:"resource-roles",level:4},{value:"Public Access",id:"public-access",level:4},{value:"Blacklist",id:"blacklist",level:4},{value:"Role Management",id:"role-management",level:2},{value:"Creating Resource Roles",id:"creating-resource-roles",level:3},{value:"Checking Permissions",id:"checking-permissions",level:3},{value:"Role Hierarchy",id:"role-hierarchy",level:3},{value:"Resource-Level Permissions",id:"resource-level-permissions",level:2},{value:"Resource-Based Access Control",id:"resource-based-access-control",level:3},{value:"Method-Specific Permissions",id:"method-specific-permissions",level:3},{value:"CORS Configuration",id:"cors-configuration",level:2},{value:"Method Bitmask",id:"method-bitmask",level:3},{value:"Permission Presets",id:"permission-presets",level:2},{value:"Static Website",id:"static-website",level:3},{value:"Dynamic API",id:"dynamic-api",level:3},{value:"Immutable Content",id:"immutable-content",level:3},{value:"Security Best Practices",id:"security-best-practices",level:2},{value:"1. Principle of Least Privilege",id:"1-principle-of-least-privilege",level:3},{value:"2. Role Separation",id:"2-role-separation",level:3},{value:"3. Regular Audits",id:"3-regular-audits",level:3},{value:"4. Emergency Procedures",id:"4-emergency-procedures",level:3},{value:"Common Permission Patterns",id:"common-permission-patterns",level:2},{value:"Public Website",id:"public-website",level:3},{value:"Team Collaboration",id:"team-collaboration",level:3},{value:"API with Authentication",id:"api-with-authentication",level:3},{value:"Troubleshooting Permissions",id:"troubleshooting-permissions",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debugging Steps",id:"debugging-steps",level:3},{value:"Migration and Updates",id:"migration-and-updates",level:2},{value:"Adding New Roles",id:"adding-new-roles",level:3},{value:"Updating Permissions",id:"updating-permissions",level:3},{value:"Emergency Access",id:"emergency-access",level:3},{value:"Emergency Admin Revoke",id:"emergency-admin-revoke",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"wttp-permissions-and-access-control",children:"WTTP Permissions and Access Control"})}),"\n",(0,i.jsx)(s.p,{children:"WTTP Site implements a sophisticated role-based access control (RBAC) system that allows you to fine-tune who can access and modify different parts of your on-chain website. This system provides both security and flexibility for managing your site's content and functionality."}),"\n",(0,i.jsx)(s.h2,{id:"permission-system-overview",children:"Permission System Overview"}),"\n",(0,i.jsx)(s.p,{children:"The permission system is built on top of OpenZeppelin's AccessControl and uses a hierarchical role structure with resource-specific permissions."}),"\n",(0,i.jsx)(s.h3,{id:"core-roles",children:"Core Roles"}),"\n",(0,i.jsx)(s.h4,{id:"default_admin_role",children:"DEFAULT_ADMIN_ROLE"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Purpose"}),": Ultimate control over the entire site"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Capabilities"}),": Can perform any action, bypass all restrictions"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Assignment"}),": Set during deployment, typically to the deployer"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Use Case"}),": Emergency recovery, site ownership transfer"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"site_admin_role",children:"SITE_ADMIN_ROLE"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Purpose"}),": Manage site-wide configuration and settings"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Capabilities"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Modify site headers and CORS policies"}),"\n",(0,i.jsx)(s.li,{children:"Manage other roles and permissions"}),"\n",(0,i.jsx)(s.li,{children:"Configure cache settings"}),"\n",(0,i.jsx)(s.li,{children:"Cannot bypass resource-specific restrictions"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Assignment"}),": Granted by DEFAULT_ADMIN_ROLE"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Use Case"}),": Site administrators, content managers"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"resource-roles",children:"Resource Roles"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Purpose"}),": Control access to specific paths or file patterns"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Capabilities"}),": Read, write, or modify specific resources as set in CORS"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Assignment"}),": Created dynamically for specific paths"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Use Case"}),": Team members with limited access, public content areas"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"public-access",children:"Public Access"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Purpose"}),": Allow anyone to access certain resources"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Capabilities"}),": Read, write, or modify specific resources as set in CORS"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Assignment"}),": Configured per resource"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Use Case"}),": Public websites, documentation, marketing pages"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"blacklist",children:"Blacklist"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Purpose"}),": Explicitly deny access to specific addresses"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Capabilities"}),": Blocks all access regardless of other permissions"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Assignment"}),": Set by administrators"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Use Case"}),": Block malicious users, temporary restrictions"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"role-management",children:"Role Management"}),"\n",(0,i.jsx)(s.h3,{id:"creating-resource-roles",children:"Creating Resource Roles"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Create a resource role for moderators\r\nconst modRole = ethers.keccak256(ethers.toUtf8Bytes('MODERATOR_ROLE'));\r\nawait site.createResourceRole(modRole);\r\n\r\n// Grant the role to a specific address\r\nawait site.grantRole(modRole, modAddress);\r\n\r\n// Revoke the role\r\nawait site.revokeRole(modRole, modAddress);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"checking-permissions",children:"Checking Permissions"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Check if an address has a specific role\r\nconst hasModRole = await site.hasRole(modRole, userAddress);\r\n\n"})}),"\n",(0,i.jsx)(s.h3,{id:"role-hierarchy",children:"Role Hierarchy"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"DEFAULT_ADMIN_ROLE\r\n    \u2193\r\nSITE_ADMIN_ROLE\r\n    \u2193\r\nResource Roles\r\n    \u2193\r\nPublic Access\r\n    \u2193\r\nBlacklist (explicit denial)\n"})}),"\n",(0,i.jsx)(s.h2,{id:"resource-level-permissions",children:"Resource-Level Permissions"}),"\n",(0,i.jsx)(s.h3,{id:"resource-based-access-control",children:"Resource-Based Access Control"}),"\n",(0,i.jsx)(s.p,{children:"You can create roles for specific resources or use DEFINE for redirects and folder definitions:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Admin-only section\r\nconst modRole = ethers.keccak256(ethers.toUtf8Bytes('MODERATOR_ROLE'));\r\n\r\n// API endpoints\r\nconst apiRole = ethers.keccak256(ethers.toUtf8Bytes('API_ROLE'));\r\n\r\n// Specific file\r\nconst configRole = ethers.keccak256(ethers.toUtf8Bytes('CONFIG_ROLE'));\r\n\r\n// Public content\r\nconst publicRole = ethers.keccak256(ethers.toUtf8Bytes('PUBLIC_ROLE'));\n"})}),"\n",(0,i.jsx)(s.h3,{id:"method-specific-permissions",children:"Method-Specific Permissions"}),"\n",(0,i.jsx)(s.p,{children:"Each HTTP method can have different permission requirements:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Read-only access\r\nconst readOnlyRole = ethers.keccak256(ethers.toUtf8Bytes('READONLY_ROLE'));\r\n\r\n// Write access\r\nconst writeRole = ethers.keccak256(ethers.toUtf8Bytes('WRITE_ROLE'));\r\n\r\n// Admin access (all methods)\r\nconst modRole = ethers.keccak256(ethers.toUtf8Bytes('MODERATOR_ROLE'));\n"})}),"\n",(0,i.jsx)(s.h2,{id:"cors-configuration",children:"CORS Configuration"}),"\n",(0,i.jsx)(s.p,{children:"Cross-Origin Resource Sharing (CORS) is configured at the resource level:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Create role groups for different access levels\r\nconst moderatorsRole = ethers.keccak256(ethers.toUtf8Bytes('MODERATORS_ROLE'));\r\nconst editorsRole = ethers.keccak256(ethers.toUtf8Bytes('EDITORS_ROLE'));\r\nconst authorsRole = ethers.keccak256(ethers.toUtf8Bytes('AUTHORS_ROLE'));\r\nconst publicRole = ethers.keccak256(ethers.toUtf8Bytes('PUBLIC_ROLE'));\r\n\r\n// Create the roles\r\nawait site.createResourceRole(moderatorsRole);\r\nawait site.createResourceRole(editorsRole);\r\nawait site.createResourceRole(authorsRole);\r\nawait site.createResourceRole(publicRole);\r\n\r\n// Grant roles to addresses\r\nawait site.grantRole(moderatorsRole, moderatorAddress);\r\nawait site.grantRole(editorsRole, editorAddress);\r\nawait site.grantRole(authorsRole, authorAddress);\r\nawait site.grantRole(publicRole, PUBLIC_ROLE);\r\n\r\nconst headerInfo: HeaderInfo = {\r\n  cors: {\r\n    methods: 0xffff, // Bitmask of allowed methods\r\n    origins: [\r\n      moderatorsRole, // Method 0 (HEAD)\r\n      moderatorsRole, // Method 1 (GET)\r\n      moderatorsRole, // Method 2 (POST)\r\n      editorsRole,    // Method 3 (PUT)\r\n      editorsRole,    // Method 4 (PATCH)\r\n      moderatorsRole, // Method 5 (DELETE)\r\n      moderatorsRole, // Method 6 (OPTIONS)\r\n      moderatorsRole, // Method 7 (LOCATE)\r\n      moderatorsRole  // Method 8 (DEFINE)\r\n    ]\r\n  },\r\n  cache: { maxAge: 3600, immutableFlag: false },\r\n  redirect: { code: 0, location: '' }\r\n};\n"})}),"\n",(0,i.jsx)(s.h3,{id:"method-bitmask",children:"Method Bitmask"}),"\n",(0,i.jsx)(s.p,{children:"The methods bitmask uses individual bits to represent allowed methods:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const METHODS = {\r\n  HEAD:    0x001,  // 1\r\n  GET:     0x002,  // 2\r\n  POST:    0x004,  // 4\r\n  PUT:     0x008,  // 8\r\n  PATCH:   0x010,  // 16\r\n  DELETE:  0x020,  // 32\r\n  OPTIONS: 0x040,  // 64\r\n  LOCATE:  0x080,  // 128\r\n  DEFINE:  0x100   // 256\r\n};\r\n\r\n// Allow GET and HEAD only\r\nconst readOnly = METHODS.GET | METHODS.HEAD; // 0x006\r\n\r\n// Allow all methods\r\nconst allMethods = 0xffff;\n"})}),"\n",(0,i.jsx)(s.h2,{id:"permission-presets",children:"Permission Presets"}),"\n",(0,i.jsx)(s.p,{children:"WTTP Site includes several permission presets for common use cases:"}),"\n",(0,i.jsx)(s.h3,{id:"static-website",children:"Static Website"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"npx hardhat site:deploy --header-preset static-website --network localhost\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Public Access"}),": All content readable by anyone"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Admin Only"}),": Only site admins can modify content"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"CORS"}),": Same-origin policy"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Cache"}),": Standard 1-hour caching"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"dynamic-api",children:"Dynamic API"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"npx hardhat site:deploy --header-preset dynamic-api --network localhost\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"API Access"}),": Controlled access to API endpoints"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"CORS"}),": Configurable for multiple origins"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Cache"}),": Disabled for dynamic content"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Methods"}),": Full HTTP method support"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"immutable-content",children:"Immutable Content"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"npx hardhat site:deploy --header-preset immutable --network localhost\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Read-Only"}),": Content cannot be modified after creation"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Public Access"}),": Anyone can read content"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Cache"}),": Long-term caching (1 year)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"ETags"}),": Strong validation"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,i.jsx)(s.h3,{id:"1-principle-of-least-privilege",children:"1. Principle of Least Privilege"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Grant only the minimum permissions necessary"}),"\n",(0,i.jsx)(s.li,{children:"Use resource-specific roles instead of broad admin access"}),"\n",(0,i.jsx)(s.li,{children:"Regularly audit and revoke unused permissions"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"2-role-separation",children:"2. Role Separation"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Separate content creators from site administrators"}),"\n",(0,i.jsx)(s.li,{children:"Use different roles for different content areas"}),"\n",(0,i.jsx)(s.li,{children:"Implement approval workflows for sensitive content"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"3-regular-audits",children:"3. Regular Audits"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Periodically review who has access to what"}),"\n",(0,i.jsx)(s.li,{children:"Monitor for unusual access patterns"}),"\n",(0,i.jsx)(s.li,{children:"Keep logs of permission changes"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"4-emergency-procedures",children:"4. Emergency Procedures"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Always maintain DEFAULT_ADMIN_ROLE access"}),"\n",(0,i.jsx)(s.li,{children:"Have a recovery plan for lost keys"}),"\n",(0,i.jsx)(s.li,{children:"Test permission changes on testnet first"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"common-permission-patterns",children:"Common Permission Patterns"}),"\n",(0,i.jsx)(s.h3,{id:"public-website",children:"Public Website"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// All content publicly readable\r\nconst publicRole = ethers.keccak256(ethers.toUtf8Bytes('PUBLIC_ROLE'));\r\nawait site.grantRole(publicRole, PUBLIC_ROLE);\r\n\r\n// Only admins can modify\r\nconst adminRole = ethers.keccak256(ethers.toUtf8Bytes('SITE_ADMIN_ROLE'));\r\nawait site.connect(owner).grantRole(adminRole, adminAddress);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"team-collaboration",children:"Team Collaboration"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Different teams for different sections\r\nconst frontendRole = ethers.keccak256(ethers.toUtf8Bytes('FRONTEND_ROLE'));\r\nconst backendRole = ethers.keccak256(ethers.toUtf8Bytes('BACKEND_ROLE'));\r\nconst docsRole = ethers.keccak256(ethers.toUtf8Bytes('DOCS_ROLE'));\r\n\r\nawait site.grantRole(frontendRole, frontendTeamAddress);\r\nawait site.grantRole(backendRole, backendTeamAddress);\r\nawait site.grantRole(docsRole, docsTeamAddress);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"api-with-authentication",children:"API with Authentication"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Public read access to API docs\r\nconst apiDocsRole = ethers.keccak256(ethers.toUtf8Bytes('API_DOCS_ROLE'));\r\nawait site.grantRole(apiDocsRole, docsAddress);\r\n\r\n// Authenticated access to API endpoints\r\nconst apiRole = ethers.keccak256(ethers.toUtf8Bytes('API_ROLE'));\r\nawait site.grantRole(apiRole, authenticatedUserAddress);\n"})}),"\n",(0,i.jsx)(s.h2,{id:"troubleshooting-permissions",children:"Troubleshooting Permissions"}),"\n",(0,i.jsx)(s.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"403 Forbidden"}),": Check if the user has the required role"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Method Not Allowed"}),": Verify the method is allowed for the resource"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"CORS Errors"}),": Check origin configuration in CORS headers"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Blacklist"}),": Ensure the address isn't on the blacklist"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"debugging-steps",children:"Debugging Steps"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["Check user roles: ",(0,i.jsx)(s.code,{children:"await site.hasRole(role, userAddress)"})]}),"\n",(0,i.jsx)(s.li,{children:"Test resource access by calling the method directly"}),"\n",(0,i.jsx)(s.li,{children:"Review CORS configuration by checking the resource's header"}),"\n",(0,i.jsx)(s.li,{children:"Check if the user has the required role for the method"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"migration-and-updates",children:"Migration and Updates"}),"\n",(0,i.jsx)(s.h3,{id:"adding-new-roles",children:"Adding New Roles"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Create new role\r\nconst newRole = ethers.keccak256(ethers.toUtf8Bytes('NEW_SECTION_ROLE'));\r\nawait site.createResourceRole(newRole);\r\n\r\n// Grant to users\r\nawait site.grantRole(newRole, userAddress);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"updating-permissions",children:"Updating Permissions"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Revoke old permissions\r\nawait site.revokeRole(oldRole, userAddress);\r\n\r\n// Grant new permissions\r\nawait site.grantRole(newRole, userAddress);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"emergency-access",children:"Emergency Access"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Grant temporary admin access\r\nawait site.grantRole(DEFAULT_ADMIN_ROLE, emergencyAddress);\r\n\r\n// Revoke after emergency is resolved\r\nawait site.revokeRole(DEFAULT_ADMIN_ROLE, emergencyAddress);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"emergency-admin-revoke",children:"Emergency Admin Revoke"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Create the new admin group\r\nconst newAdminRole = ethers.keccak256(ethers.toUtf8Bytes('NEW_ADMIN_ROLE'));\r\n// Change the admin role group\r\nawait site.changeSiteAdmin(newAdminRole);\r\n// Now you can fix admin access and revert back to SITE_ADMIN_ROLE if you wish\n"})}),"\n",(0,i.jsx)(s.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"/docs/esp/esp-overview",children:"ESP Overview"})," - Learn about the Ethereum Storage Protocol"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"/docs/esp/esp-storage",children:"ESP Storage"})," - Detailed storage mechanisms"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
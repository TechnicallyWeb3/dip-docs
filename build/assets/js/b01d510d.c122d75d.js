"use strict";(self.webpackChunkdip_docs=self.webpackChunkdip_docs||[]).push([[1992],{7168:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"esp/registry","title":"Registry","description":"The DataPointRegistry is the economic layer of ESP that manages data point publishing, royalty payments, and re-registration control. It extends the basic storage functionality with economic incentives and publisher management.","source":"@site/docs/02-esp/04-registry.md","sourceDirName":"02-esp","slug":"/esp/registry","permalink":"/docs/esp/registry","draft":false,"unlisted":false,"editUrl":"https://github.com/TechnicallyWeb3/dip-docs/tree/main/packages/create-docusaurus/templates/shared/docs/02-esp/04-registry.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"registry","title":"Registry"},"sidebar":"tutorialSidebar","previous":{"title":"ESP Storage","permalink":"/docs/esp/esp-storage"},"next":{"title":"Royalties","permalink":"/docs/esp/royalties"}}');var s=n(4848),r=n(8453);const i={id:"registry",title:"Registry"},o="ESP Registry Layer",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Core Functions",id:"core-functions",level:2},{value:"<code>registerDataPoint(bytes memory _dataPoint, address _publisher)</code>",id:"registerdatapointbytes-memory-_datapoint-address-_publisher",level:3},{value:"<code>getDataPointRoyalty(bytes32 _dataPointAddress)</code>",id:"getdatapointroyaltybytes32-_datapointaddress",level:3},{value:"<code>collectRoyalties(uint256 _amount, address _withdrawTo)</code>",id:"collectroyaltiesuint256-_amount-address-_withdrawto",level:3},{value:"<code>royaltyBalance(address _publisher)</code>",id:"royaltybalanceaddress-_publisher",level:3},{value:"Publisher Management",id:"publisher-management",level:2},{value:"Updating Publisher Address",id:"updating-publisher-address",level:3},{value:"Publisher Verification",id:"publisher-verification",level:3},{value:"Royalty System Integration",id:"royalty-system-integration",level:2},{value:"How Royalties Work",id:"how-royalties-work",level:3},{value:"Royalty Flow",id:"royalty-flow",level:3},{value:"Advanced Operations",id:"advanced-operations",level:2},{value:"Batch Registration",id:"batch-registration",level:3},{value:"Royalty-Free Data",id:"royalty-free-data",level:3},{value:"Conditional Registration",id:"conditional-registration",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Errors",id:"common-errors",level:3},{value:"<code>InsufficientRoyaltyPayment(uint256 royaltyCost)</code>",id:"insufficientroyaltypaymentuint256-royaltycost",level:4},{value:"<code>InvalidPublisher(address publisher)</code>",id:"invalidpublisheraddress-publisher",level:4},{value:"Error Prevention",id:"error-prevention",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"With Web Applications",id:"with-web-applications",level:3},{value:"With Smart Contracts",id:"with-smart-contracts",level:3},{value:"With Backend Services",id:"with-backend-services",level:3},{value:"Monitoring and Analytics",id:"monitoring-and-analytics",level:2},{value:"Event Monitoring",id:"event-monitoring",level:3},{value:"Analytics Functions",id:"analytics-functions",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Gas Optimization",id:"gas-optimization",level:3},{value:"Error Recovery",id:"error-recovery",level:3},{value:"Security Considerations",id:"security-considerations",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"esp-registry-layer",children:"ESP Registry Layer"})}),"\n",(0,s.jsx)(t.p,{children:"The DataPointRegistry is the economic layer of ESP that manages data point publishing, royalty payments, and re-registration control. It extends the basic storage functionality with economic incentives and publisher management."}),"\n",(0,s.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(t.p,{children:"The DataPointRegistry provides:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Economic Incentives"}),": Publishers earn royalties when developers re-register the same data"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Publisher Management"}),": Track and manage data point publishers"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Royalty Distribution"}),": Automatic royalty calculation and payment"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Re-registration Control"}),": Owner-controlled protocol parameters"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Integration Layer"}),": Seamless integration with DataPointStorage"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,s.jsx)(t.h3,{id:"registerdatapointbytes-memory-_datapoint-address-_publisher",children:(0,s.jsx)(t.code,{children:"registerDataPoint(bytes memory _dataPoint, address _publisher)"})}),"\n",(0,s.jsx)(t.p,{children:"Registers a data point with royalty tracking."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Register data with publisher\nconst data = ethers.toUtf8Bytes("My published content");\nconst publisherAddress = signer.address;\nconst tx = await dataPointRegistry.registerDataPoint(data, publisherAddress);\nawait tx.wait();\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"_dataPoint"}),": The data to store"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"_publisher"}),": Publisher address (use ",(0,s.jsx)(t.code,{children:"address(0)"})," to waive royalties)"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"bytes32"})," - The data point address"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Events:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"DataPointRegistered(bytes32 indexed dataPointAddress, address indexed publisher)"})}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"getdatapointroyaltybytes32-_datapointaddress",children:(0,s.jsx)(t.code,{children:"getDataPointRoyalty(bytes32 _dataPointAddress)"})}),"\n",(0,s.jsx)(t.p,{children:"Gets the royalty cost for re-registering a data point."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Get royalty cost\nconst address = await dataPointStorage.calculateAddress(data);\nconst royaltyCost = await dataPointRegistry.getDataPointRoyalty(address);\nconsole.log("Royalty cost:", ethers.formatEther(royaltyCost), "ETH");\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"uint256"})," - Royalty cost in wei"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"collectroyaltiesuint256-_amount-address-_withdrawto",children:(0,s.jsx)(t.code,{children:"collectRoyalties(uint256 _amount, address _withdrawTo)"})}),"\n",(0,s.jsx)(t.p,{children:"Allows publishers to withdraw their earned royalties."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Withdraw royalties\nconst amount = ethers.parseEther("0.1"); // 0.1 ETH\nconst tx = await dataPointRegistry.collectRoyalties(amount, signer.address);\nawait tx.wait();\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"_amount"}),": Amount to withdraw in wei"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"_withdrawTo"}),": Address to send royalties to"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Events:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"RoyaltiesCollected(address indexed publisher, uint256 amount, address indexed withdrawTo)"})}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"royaltybalanceaddress-_publisher",children:(0,s.jsx)(t.code,{children:"royaltyBalance(address _publisher)"})}),"\n",(0,s.jsx)(t.p,{children:"Checks the royalty balance of a publisher."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Check royalty balance\nconst balance = await dataPointRegistry.royaltyBalance(publisherAddress);\nconsole.log("Royalty balance:", ethers.formatEther(balance), "ETH");\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"uint256"})," - Current balance in wei"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"publisher-management",children:"Publisher Management"}),"\n",(0,s.jsx)(t.h3,{id:"updating-publisher-address",children:"Updating Publisher Address"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Update publisher address\nconst newPublisherAddress = "0x1234...";\nconst tx = await dataPointRegistry.updatePublisherAddress(\n    dataPointAddress, \n    newPublisherAddress\n);\nawait tx.wait();\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Requirements:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Only the current publisher can update the address"}),"\n",(0,s.jsx)(t.li,{children:"New address cannot be zero address"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"publisher-verification",children:"Publisher Verification"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// Check if address is publisher of data point\nasync function isPublisher(dataPointAddress: string, address: string): Promise<boolean> {\n    const royaltyInfo = await dataPointRegistry.getDataPointRoyalty(dataPointAddress);\n    // This is a simplified check - you'd need to implement proper royalty info retrieval\n    return true; // Implement based on your needs\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"royalty-system-integration",children:"Royalty System Integration"}),"\n",(0,s.jsx)(t.h3,{id:"how-royalties-work",children:"How Royalties Work"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Data Registration"}),": When data is first registered, gas usage is tracked"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Royalty Calculation"}),": Royalty = gas_used \xd7 royalty_rate"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Re-registration Payment"}),": Developers pay royalties when re-registering existing data"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Publisher Rewards"}),": Publishers earn royalties minus a small protocol fee"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"royalty-flow",children:"Royalty Flow"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// First registration (publisher pays gas, earns royalties)\nconst data = ethers.toUtf8Bytes("New content");\nconst tx1 = await dataPointRegistry.registerDataPoint(data, publisherAddress);\nawait tx1.wait();\n\n// Subsequent re-registration (developer pays royalties)\nconst address = await dataPointStorage.calculateAddress(data);\nconst royaltyCost = await dataPointRegistry.getDataPointRoyalty(address);\nconst tx2 = await dataPointRegistry.registerDataPoint(data, address(0), {\n    value: royaltyCost\n});\nawait tx2.wait();\n'})}),"\n",(0,s.jsx)(t.h2,{id:"advanced-operations",children:"Advanced Operations"}),"\n",(0,s.jsx)(t.h3,{id:"batch-registration",children:"Batch Registration"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Register multiple data points\nconst dataPoints = [\n    { data: ethers.toUtf8Bytes("Content 1"), publisher: publisher1 },\n    { data: ethers.toUtf8Bytes("Content 2"), publisher: publisher2 },\n    { data: ethers.toUtf8Bytes("Content 3"), publisher: publisher3 }\n];\n\nconst addresses = [];\nfor (const { data, publisher } of dataPoints) {\n    const tx = await dataPointRegistry.registerDataPoint(data, publisher);\n    await tx.wait();\n    const address = await dataPointStorage.calculateAddress(data);\n    addresses.push(address);\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"royalty-free-data",children:"Royalty-Free Data"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Register data without royalties\nconst data = ethers.toUtf8Bytes("Free content");\nconst tx = await dataPointRegistry.registerDataPoint(data, ethers.ZeroAddress);\nawait tx.wait();\n'})}),"\n",(0,s.jsx)(t.h3,{id:"conditional-registration",children:"Conditional Registration"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Check if data exists before registering\nasync function registerIfNew(data: Uint8Array, publisher: string) {\n    const address = await dataPointStorage.calculateAddress(data);\n    const size = await dataPointStorage.dataPointSize(address);\n    \n    if (size > 0) {\n        console.log("Data already exists, paying royalties to re-register...");\n        const royaltyCost = await dataPointRegistry.getDataPointRoyalty(address);\n        const tx = await dataPointRegistry.registerDataPoint(data, ethers.ZeroAddress, {\n            value: royaltyCost\n        });\n        await tx.wait();\n    } else {\n        console.log("New data, registering...");\n        const tx = await dataPointRegistry.registerDataPoint(data, publisher);\n        await tx.wait();\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(t.h3,{id:"common-errors",children:"Common Errors"}),"\n",(0,s.jsx)(t.h4,{id:"insufficientroyaltypaymentuint256-royaltycost",children:(0,s.jsx)(t.code,{children:"InsufficientRoyaltyPayment(uint256 royaltyCost)"})}),"\n",(0,s.jsx)(t.p,{children:"Thrown when not enough ETH is sent for royalty payment."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'try {\n    const tx = await dataPointRegistry.registerDataPoint(data, ethers.ZeroAddress, {\n        value: ethers.parseEther("0.001") // Too little\n    });\n} catch (error) {\n    if (error.message.includes("InsufficientRoyaltyPayment")) {\n        console.log("Not enough ETH for royalty payment");\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h4,{id:"invalidpublisheraddress-publisher",children:(0,s.jsx)(t.code,{children:"InvalidPublisher(address publisher)"})}),"\n",(0,s.jsx)(t.p,{children:"Thrown when trying to update publisher address without permission."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'try {\n    const tx = await dataPointRegistry.updatePublisherAddress(\n        dataPointAddress, \n        newPublisherAddress\n    );\n} catch (error) {\n    if (error.message.includes("InvalidPublisher")) {\n        console.log("Not authorized to update publisher");\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"error-prevention",children:"Error Prevention"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Check royalty cost before payment\nasync function payRoyaltiesSafely(dataPointAddress: string) {\n    const royaltyCost = await dataPointRegistry.getDataPointRoyalty(dataPointAddress);\n    \n    if (royaltyCost > 0) {\n        const balance = await provider.getBalance(signer.address);\n        if (balance < royaltyCost) {\n            throw new Error("Insufficient balance for royalty payment");\n        }\n        \n        const tx = await dataPointRegistry.registerDataPoint(\n            data, \n            ethers.ZeroAddress, \n            { value: royaltyCost }\n        );\n        await tx.wait();\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,s.jsx)(t.h3,{id:"with-web-applications",children:"With Web Applications"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// React hook for data registration\nimport { useState } from 'react';\nimport { useContract } from './hooks/useContract';\n\nfunction useDataRegistration() {\n    const [loading, setLoading] = useState(false);\n    const { dataPointRegistry } = useContract();\n    \n    const registerData = async (data: string, publisher: string) => {\n        setLoading(true);\n        try {\n            const dataBytes = ethers.toUtf8Bytes(data);\n            const tx = await dataPointRegistry.registerDataPoint(dataBytes, publisher);\n            await tx.wait();\n            return tx.hash;\n        } catch (error) {\n            console.error(\"Registration failed:\", error);\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n    \n    return { registerData, loading };\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"with-smart-contracts",children:"With Smart Contracts"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-solidity",children:"// Solidity contract using ESP registry\ncontract MyApp {\n    IDataPointRegistry public registry;\n    \n    constructor(address _registry) {\n        registry = IDataPointRegistry(_registry);\n    }\n    \n    function publishData(bytes memory data) external {\n        registry.registerDataPoint(data, msg.sender);\n    }\n    \n    function reRegisterData(bytes memory data) external payable {\n        registry.registerDataPoint{value: msg.value}(data, address(0));\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"with-backend-services",children:"With Backend Services"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// Node.js service for data management\nclass DataService {\n    constructor(registry: DataPointRegistry) {\n        this.registry = registry;\n    }\n    \n    async publishContent(content: string, publisher: string) {\n        const data = ethers.toUtf8Bytes(content);\n        const tx = await this.registry.registerDataPoint(data, publisher);\n        await tx.wait();\n        \n        const address = await this.registry.DPS().calculateAddress(data);\n        return {\n            address,\n            txHash: tx.hash,\n            publisher\n        };\n    }\n    \n    async reRegisterContent(data: Uint8Array) {\n        const address = await this.registry.DPS().calculateAddress(data);\n        const royaltyCost = await this.registry.getDataPointRoyalty(address);\n        \n        if (royaltyCost > 0) {\n            const tx = await this.registry.registerDataPoint(data, ethers.ZeroAddress, {\n                value: royaltyCost\n            });\n            await tx.wait();\n        }\n        \n        return address;\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"monitoring-and-analytics",children:"Monitoring and Analytics"}),"\n",(0,s.jsx)(t.h3,{id:"event-monitoring",children:"Event Monitoring"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Monitor registration events\nconst filter = dataPointRegistry.filters.DataPointRegistered();\ndataPointRegistry.on(filter, (dataPointAddress, publisher) => {\n    console.log("New data registered:", {\n        address: dataPointAddress,\n        publisher: publisher\n    });\n});\n\n// Monitor royalty payments\nconst royaltyFilter = dataPointRegistry.filters.RoyaltiesPaid();\ndataPointRegistry.on(royaltyFilter, (dataPointAddress, payer, amount) => {\n    console.log("Royalty paid:", {\n        address: dataPointAddress,\n        payer: payer,\n        amount: ethers.formatEther(amount)\n    });\n});\n'})}),"\n",(0,s.jsx)(t.h3,{id:"analytics-functions",children:"Analytics Functions"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// Get publisher statistics\nasync function getPublisherStats(publisher: string) {\n    const balance = await dataPointRegistry.royaltyBalance(publisher);\n    return {\n        royaltyBalance: ethers.formatEther(balance),\n        balanceWei: balance.toString()\n    };\n}\n\n// Check data point status\nasync function getDataPointStatus(dataPointAddress: string) {\n    const royaltyCost = await dataPointRegistry.getDataPointRoyalty(dataPointAddress);\n    const size = await dataPointRegistry.DPS().dataPointSize(dataPointAddress);\n    \n    return {\n        exists: size > 0,\n        royaltyCost: ethers.formatEther(royaltyCost),\n        size: size.toString()\n    };\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(t.h3,{id:"gas-optimization",children:"Gas Optimization"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Batch operations when possible\nconst dataPoints = [/* multiple data points */];\nconst tx = await dataPointRegistry.multicall(\n    dataPoints.map(dp => \n        dataPointRegistry.interface.encodeFunctionData(\n            "registerDataPoint", \n            [dp.data, dp.publisher]\n        )\n    )\n);\n'})}),"\n",(0,s.jsx)(t.h3,{id:"error-recovery",children:"Error Recovery"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// Implement retry logic for failed transactions\nasync function registerWithRetry(data: Uint8Array, publisher: string, maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            const tx = await dataPointRegistry.registerDataPoint(data, publisher);\n            await tx.wait();\n            return tx;\n        } catch (error) {\n            if (i === maxRetries - 1) throw error;\n            await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'// Validate inputs before registration\nfunction validateRegistration(data: Uint8Array, publisher: string): boolean {\n    if (data.length === 0) {\n        throw new Error("Data cannot be empty");\n    }\n    if (publisher === ethers.ZeroAddress) {\n        console.log("Warning: Registering without royalties");\n    }\n    return true;\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/docs/esp/royalties",children:"Learn about Royalty System"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/docs/esp/esp-storage",children:"Explore Storage Layer"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/docs/esp/datapoints",children:"Understand Data Points"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/docs/esp/esp-overview",children:"Back to Overview"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(6540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);
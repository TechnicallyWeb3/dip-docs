"use strict";(self.webpackChunkdip_docs=self.webpackChunkdip_docs||[]).push([[3274],{6321:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"handler/handler-examples","title":"Handler Examples","description":"This guide provides practical examples of using the DIP Handler in various scenarios. These examples demonstrate real-world usage patterns and best practices.","source":"@site/docs/04-handler/03-examples.md","sourceDirName":"04-handler","slug":"/handler/handler-examples","permalink":"/docs/handler/handler-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/TechnicallyWeb3/dip-docs/tree/main/packages/create-docusaurus/templates/shared/docs/04-handler/03-examples.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"handler-examples","title":"Handler Examples"},"sidebar":"tutorialSidebar","previous":{"title":"Handler Installation","permalink":"/docs/handler/handler-installation"},"next":{"title":"Handler Roadmap","permalink":"/docs/handler/handler-roadmap"}}');var s=r(4848),a=r(8453);const i={id:"handler-examples",title:"Handler Examples"},o="DIP Handler Examples",l={},c=[{value:"Basic Usage Examples",id:"basic-usage-examples",level:2},{value:"Simple Content Fetching",id:"simple-content-fetching",level:3},{value:"Working with Different File Types",id:"working-with-different-file-types",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Advanced Usage Examples",id:"advanced-usage-examples",level:2},{value:"Custom Headers and Options",id:"custom-headers-and-options",level:3},{value:"Range Requests for Large Files",id:"range-requests-for-large-files",level:3},{value:"Working with Different HTTP Methods",id:"working-with-different-http-methods",level:3},{value:"Multi-Chain Examples",id:"multi-chain-examples",level:2},{value:"Working with Different Networks",id:"working-with-different-networks",level:3},{value:"Environment-Specific Configuration",id:"environment-specific-configuration",level:3},{value:"Authentication Examples",id:"authentication-examples",level:2},{value:"Using Custom Signers",id:"using-custom-signers",level:3},{value:"Wallet Integration",id:"wallet-integration",level:3},{value:"Content Management Examples",id:"content-management-examples",level:2},{value:"Building a Simple Website",id:"building-a-simple-website",level:3},{value:"Content Aggregation",id:"content-aggregation",level:3},{value:"Performance Optimization Examples",id:"performance-optimization-examples",level:2},{value:"Caching Strategy",id:"caching-strategy",level:3},{value:"Streaming Large Files",id:"streaming-large-files",level:3},{value:"Error Handling and Resilience",id:"error-handling-and-resilience",level:2},{value:"Retry Logic",id:"retry-logic",level:3},{value:"Fallback Strategies",id:"fallback-strategies",level:3},{value:"Future Protocol Examples (Roadmap)",id:"future-protocol-examples-roadmap",level:2},{value:"IPFS Integration (Planned)",id:"ipfs-integration-planned",level:3},{value:"Bitcoin Ordinals (Planned)",id:"bitcoin-ordinals-planned",level:3},{value:"Arweave Integration (Planned)",id:"arweave-integration-planned",level:3},{value:"ESP Protocol Support (Planned)",id:"esp-protocol-support-planned",level:3},{value:"Testing Examples",id:"testing-examples",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Handle Errors",id:"1-always-handle-errors",level:3},{value:"2. Use Appropriate Timeouts",id:"2-use-appropriate-timeouts",level:3},{value:"3. Validate Responses",id:"3-validate-responses",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"dip-handler-examples",children:"DIP Handler Examples"})}),"\n",(0,s.jsx)(n.p,{children:"This guide provides practical examples of using the DIP Handler in various scenarios. These examples demonstrate real-world usage patterns and best practices."}),"\n",(0,s.jsx)(n.h2,{id:"basic-usage-examples",children:"Basic Usage Examples"}),"\n",(0,s.jsx)(n.h3,{id:"simple-content-fetching",children:"Simple Content Fetching"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { WTTPHandler } from '@wttp/handler';\r\n\r\nconst handler = new WTTPHandler();\r\n\r\n// Fetch a webpage\r\nconst response = await handler.fetch('wttp://mysite.eth:sepolia/index.html');\r\nconsole.log('Status:', response.status);\r\nconsole.log('Content:', await response.text());\n"})}),"\n",(0,s.jsx)(n.h3,{id:"working-with-different-file-types",children:"Working with Different File Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Text content\r\nconst textResponse = await handler.fetch('wttp://site.eth:sepolia/readme.txt');\r\nconst textContent = await textResponse.text();\r\n\r\n// JSON data\r\nconst jsonResponse = await handler.fetch('wttp://api.eth:sepolia/data.json');\r\nconst jsonData = await jsonResponse.json();\r\n\r\n// Binary content (images, PDFs, etc.)\r\nconst imageResponse = await handler.fetch('wttp://site.eth:sepolia/logo.png');\r\nconst imageBuffer = await imageResponse.arrayBuffer();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"try {\r\n  const response = await handler.fetch('wttp://site.eth:sepolia/missing.html');\r\n  \r\n  if (response.status === 404) {\r\n    console.log('File not found');\r\n  } else if (response.status === 200) {\r\n    console.log('Success:', await response.text());\r\n  }\r\n} catch (error) {\r\n  console.error('Network error:', error);\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-usage-examples",children:"Advanced Usage Examples"}),"\n",(0,s.jsx)(n.h3,{id:"custom-headers-and-options",children:"Custom Headers and Options"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Fetch with custom headers\r\nconst response = await handler.fetch('wttp://site.eth:sepolia/api/data', {\r\n  method: 'GET',\r\n  headers: {\r\n    'Range': 'bytes=0-1023',  // First 1KB\r\n    'If-Modified-Since': '1640995200'\r\n  }\r\n});\r\n\r\n// Check if content was modified\r\nif (response.status === 304) {\r\n  console.log('Content not modified, use cached version');\r\n} else {\r\n  console.log('New content:', await response.text());\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"range-requests-for-large-files",children:"Range Requests for Large Files"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Fetch first 1KB of a large file\r\nconst partialResponse = await handler.fetch('wttp://site.eth:sepolia/large-file.pdf', {\r\n  headers: {\r\n    'Range': 'bytes=0-1023'\r\n  }\r\n});\r\n\r\nconsole.log('Partial content size:', partialResponse.headers['Content-Length']);\r\nconsole.log('Content-Range:', partialResponse.headers['Content-Range']);\r\n\r\n// Fetch specific byte range\r\nconst rangeResponse = await handler.fetch('wttp://site.eth:sepolia/video.mp4', {\r\n  headers: {\r\n    'Range': 'bytes=1024-2047'  // Second 1KB\r\n  }\r\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"working-with-different-http-methods",children:"Working with Different HTTP Methods"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// HEAD request - get metadata without content\r\nconst headResponse = await handler.fetch('wttp://site.eth:sepolia/file.pdf', {\r\n  method: 'HEAD'\r\n});\r\n\r\nconsole.log('Content-Length:', headResponse.headers['Content-Length']);\r\nconsole.log('Content-Type:', headResponse.headers['Content-Type']);\r\nconsole.log('ETag:', headResponse.headers['ETag']);\r\n\r\n// OPTIONS request - discover allowed methods\r\nconst optionsResponse = await handler.fetch('wttp://site.eth:sepolia/api/', {\r\n  method: 'OPTIONS'\r\n});\r\n\r\nconsole.log('Allowed methods:', optionsResponse.headers['Allowed-Methods']);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"multi-chain-examples",children:"Multi-Chain Examples"}),"\n",(0,s.jsx)(n.h3,{id:"working-with-different-networks",children:"Working with Different Networks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Create handlers for different networks\r\nconst handlers = {\r\n  sepolia: new WTTPHandler(undefined, 'sepolia'),\r\n  mainnet: new WTTPHandler(undefined, 'mainnet'),\r\n  polygon: new WTTPHandler(undefined, 'polygon'),\r\n  localhost: new WTTPHandler(undefined, 'localhost')\r\n};\r\n\r\n// Fetch from different networks\r\nconst sepoliaContent = await handlers.sepolia.fetch('wttp://site.eth:sepolia/page.html');\r\nconst mainnetContent = await handlers.mainnet.fetch('wttp://site.eth:mainnet/page.html');\r\nconst polygonContent = await handlers.polygon.fetch('wttp://site.eth:polygon/page.html');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"environment-specific-configuration",children:"Environment-Specific Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Development environment\r\nconst devHandler = new WTTPHandler(undefined, 'localhost');\r\n\r\n// Staging environment\r\nconst stagingHandler = new WTTPHandler(undefined, 'sepolia');\r\n\r\n// Production environment\r\nconst prodHandler = new WTTPHandler(undefined, 'mainnet');\r\n\r\n// Use appropriate handler based on environment\r\nconst handler = process.env.NODE_ENV === 'production' ? prodHandler : \r\n                process.env.NODE_ENV === 'staging' ? stagingHandler : devHandler;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"authentication-examples",children:"Authentication Examples"}),"\n",(0,s.jsx)(n.h3,{id:"using-custom-signers",children:"Using Custom Signers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { ethers } from 'ethers';\r\n\r\n// Create custom signer\r\nconst provider = new ethers.JsonRpcProvider('https://sepolia.infura.io/v3/YOUR_KEY');\r\nconst signer = new ethers.Wallet('YOUR_PRIVATE_KEY', provider);\r\n\r\n// Create handler with custom signer\r\nconst handler = new WTTPHandler(signer, 'sepolia');\r\n\r\n// Fetch with authentication\r\nconst response = await handler.fetch('wttp://private-site.eth:sepolia/admin/data');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"wallet-integration",children:"Wallet Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Browser wallet integration (MetaMask, etc.)\r\nconst connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    const provider = new ethers.BrowserProvider(window.ethereum);\r\n    const signer = await provider.getSigner();\r\n    return new WTTPHandler(signer, 'sepolia');\r\n  }\r\n  throw new Error('No wallet found');\r\n};\r\n\r\n// Use connected wallet\r\nconst handler = await connectWallet();\r\nconst response = await handler.fetch('wttp://site.eth:sepolia/user-data');\n"})}),"\n",(0,s.jsx)(n.h2,{id:"content-management-examples",children:"Content Management Examples"}),"\n",(0,s.jsx)(n.h3,{id:"building-a-simple-website",children:"Building a Simple Website"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Fetch multiple pages for a website\r\nconst pages = [\r\n  'wttp://mysite.eth:sepolia/index.html',\r\n  'wttp://mysite.eth:sepolia/about.html',\r\n  'wttp://mysite.eth:sepolia/contact.html'\r\n];\r\n\r\nconst websiteContent = await Promise.all(\r\n  pages.map(async (url) => {\r\n    const response = await handler.fetch(url);\r\n    return {\r\n      url,\r\n      content: await response.text(),\r\n      status: response.status\r\n    };\r\n  })\r\n);\r\n\r\nconsole.log('Website loaded:', websiteContent);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"content-aggregation",children:"Content Aggregation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Aggregate content from multiple sources\r\nconst sources = [\r\n  'wttp://news.eth:sepolia/latest.json',\r\n  'wttp://blog.eth:sepolia/posts.json',\r\n  'wttp://api.eth:sepolia/status.json'\r\n];\r\n\r\nconst aggregatedData = await Promise.allSettled(\r\n  sources.map(async (url) => {\r\n    const response = await handler.fetch(url);\r\n    return {\r\n      source: url,\r\n      data: await response.json(),\r\n      timestamp: Date.now()\r\n    };\r\n  })\r\n);\r\n\r\n// Handle successful and failed requests\r\naggregatedData.forEach((result, index) => {\r\n  if (result.status === 'fulfilled') {\r\n    console.log('Success:', result.value);\r\n  } else {\r\n    console.error('Failed:', sources[index], result.reason);\r\n  }\r\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimization-examples",children:"Performance Optimization Examples"}),"\n",(0,s.jsx)(n.h3,{id:"caching-strategy",children:"Caching Strategy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Simple in-memory cache\r\nconst cache = new Map();\r\n\r\nconst fetchWithCache = async (url: string) => {\r\n  // Check cache first\r\n  if (cache.has(url)) {\r\n    const cached = cache.get(url);\r\n    if (Date.now() - cached.timestamp < 300000) { // 5 minutes\r\n      return cached.response;\r\n    }\r\n  }\r\n\r\n  // Fetch from network\r\n  const response = await handler.fetch(url);\r\n  const content = await response.text();\r\n\r\n  // Cache the response\r\n  cache.set(url, {\r\n    response: { ...response, body: content },\r\n    timestamp: Date.now()\r\n  });\r\n\r\n  return { ...response, body: content };\r\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"streaming-large-files",children:"Streaming Large Files"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Stream large files in chunks\r\nconst streamLargeFile = async (url: string, chunkSize: number = 1024 * 1024) => {\r\n  const chunks: Uint8Array[] = [];\r\n  let offset = 0;\r\n\r\n  while (true) {\r\n    const response = await handler.fetch(url, {\r\n      headers: {\r\n        'Range': `bytes=${offset}-${offset + chunkSize - 1}`\r\n      }\r\n    });\r\n\r\n    if (response.status === 206) { // Partial content\r\n      const chunk = new Uint8Array(await response.arrayBuffer());\r\n      chunks.push(chunk);\r\n      offset += chunk.length;\r\n\r\n      if (chunk.length < chunkSize) {\r\n        break; // Last chunk\r\n      }\r\n    } else {\r\n      break; // No more content\r\n    }\r\n  }\r\n\r\n  // Combine chunks\r\n  const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\r\n  const result = new Uint8Array(totalLength);\r\n  let position = 0;\r\n\r\n  for (const chunk of chunks) {\r\n    result.set(chunk, position);\r\n    position += chunk.length;\r\n  }\r\n\r\n  return result;\r\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling-and-resilience",children:"Error Handling and Resilience"}),"\n",(0,s.jsx)(n.h3,{id:"retry-logic",children:"Retry Logic"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const fetchWithRetry = async (url: string, maxRetries: number = 3) => {\r\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      const response = await handler.fetch(url);\r\n      return response;\r\n    } catch (error) {\r\n      console.log(`Attempt ${attempt} failed:`, error);\r\n      \r\n      if (attempt === maxRetries) {\r\n        throw error;\r\n      }\r\n\r\n      // Exponential backoff\r\n      await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"fallback-strategies",children:"Fallback Strategies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const fetchWithFallback = async (primaryUrl: string, fallbackUrl: string) => {\r\n  try {\r\n    const response = await handler.fetch(primaryUrl);\r\n    if (response.status === 200) {\r\n      return response;\r\n    }\r\n  } catch (error) {\r\n    console.log('Primary failed, trying fallback:', error);\r\n  }\r\n\r\n  // Try fallback\r\n  try {\r\n    return await handler.fetch(fallbackUrl);\r\n  } catch (error) {\r\n    throw new Error(`Both primary and fallback failed: ${error}`);\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"future-protocol-examples-roadmap",children:"Future Protocol Examples (Roadmap)"}),"\n",(0,s.jsx)(n.h3,{id:"ipfs-integration-planned",children:"IPFS Integration (Planned)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Future IPFS support\r\nconst ipfsResponse = await handler.fetch('ipfs://QmHash/path/to/file');\r\nconst ipfsContent = await ipfsResponse.text();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"bitcoin-ordinals-planned",children:"Bitcoin Ordinals (Planned)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Future Ordinals support\r\nconst ordinalResponse = await handler.fetch('ord://inscription-id');\r\nconst ordinalContent = await ordinalResponse.arrayBuffer();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"arweave-integration-planned",children:"Arweave Integration (Planned)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Future Arweave support\r\nconst arweaveResponse = await handler.fetch('ar://transaction-id');\r\nconst arweaveContent = await arweaveResponse.text();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"esp-protocol-support-planned",children:"ESP Protocol Support (Planned)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Future ESP support\r\nconst espResponse = await handler.fetch('esp://datapoint-address');\r\nconst espContent = await espResponse.text();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-examples",children:"Testing Examples"}),"\n",(0,s.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { jest } from '@jest/globals';\r\n\r\n// Mock handler for testing\r\nconst mockHandler = {\r\n  fetch: jest.fn().mockResolvedValue({\r\n    status: 200,\r\n    headers: { 'Content-Type': 'text/html' },\r\n    text: () => Promise.resolve('<h1>Test Content</h1>')\r\n  })\r\n};\r\n\r\n// Test your application logic\r\ntest('should fetch and process content', async () => {\r\n  const content = await mockHandler.fetch('wttp://test.eth:sepolia/page.html');\r\n  expect(content.status).toBe(200);\r\n  expect(await content.text()).toBe('<h1>Test Content</h1>');\r\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Test against real WTTP sites\r\ndescribe('WTTP Handler Integration', () => {\r\n  const handler = new WTTPHandler(undefined, 'sepolia');\r\n\r\n  test('should fetch from real WTTP site', async () => {\r\n    const response = await handler.fetch('wttp://test-site.eth:sepolia/index.html');\r\n    expect(response.status).toBe(200);\r\n    expect(response.headers['Content-Type']).toContain('text/html');\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-always-handle-errors",children:"1. Always Handle Errors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const safeFetch = async (url: string) => {\r\n  try {\r\n    const response = await handler.fetch(url);\r\n    if (response.status >= 400) {\r\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Fetch failed:', error);\r\n    throw error;\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-use-appropriate-timeouts",children:"2. Use Appropriate Timeouts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const fetchWithTimeout = async (url: string, timeout: number = 10000) => {\r\n  const controller = new AbortController();\r\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n\r\n  try {\r\n    const response = await handler.fetch(url, {\r\n      signal: controller.signal\r\n    });\r\n    clearTimeout(timeoutId);\r\n    return response;\r\n  } catch (error) {\r\n    clearTimeout(timeoutId);\r\n    throw error;\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-validate-responses",children:"3. Validate Responses"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const validateResponse = (response: Response) => {\r\n  if (!response.ok) {\r\n    throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const contentType = response.headers.get('Content-Type');\r\n  if (!contentType) {\r\n    console.warn('No Content-Type header found');\r\n  }\r\n  \r\n  return response;\r\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/handler/handler-overview",children:"Handler Overview"})," - Understanding the handler"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/handler/handler-installation",children:"Installation Guide"})," - Setup and configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/handler/handler-roadmap",children:"Roadmap"})," - Development timeline and future plans"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/wttp/wttp-methods",children:"WTTP Methods"})," - Understanding WTTP protocol methods"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);